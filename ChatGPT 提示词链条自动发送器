// ==UserScript==
// @name         ChatGPT 提示词链条自动发送器 - 极简版
// @namespace    http://tampermonkey.net/
// @version      3.0
// @description  极简风格的ChatGPT提示词链条自动发送器
// @author       You
// @match        https://chat.openai.com/*
// @match        https://chatgpt.com/*
// @grant        none
// ==/UserScript==

(function() {
  'use strict';

  // 配置
  const CONFIG = {
    SEPARATOR: '---NEXT-PROMPT---',
    SEND_DELAY: 2000,
    MAX_WAIT: 300000,
    CHECK_INTERVAL: 1000
  };

  // 默认提示词模板
  let PROMPTS = `请分析以下复盘日志的背景和核心要素：

{{INPUT}}

请从以下维度进行分析：
1. 事件背景和起因
2. 关键决策点
3. 执行过程中的问题
4. 结果和影响
5. 经验教训

${CONFIG.SEPARATOR}

基于上述分析，请提供3个具体的改进方案：

1. 流程优化方案
2. 决策机制改进方案
3. 风险预防方案

请为每个方案提供：
- 具体实施步骤
- 预期效果
- 实施难度评估

${CONFIG.SEPARATOR}

请评估这些改进方案的可行性，并推荐最佳方案：

考虑因素：
- 实施成本
- 预期收益
- 风险程度
- 组织接受度
- 长远价值

${CONFIG.SEPARATOR}

请制定详细的实施计划：

包括：
- 分阶段实施时间表
- 所需资源和人员
- 关键里程碑和检查点
- 风险应对和应急预案
- 成功指标和评估标准

${CONFIG.SEPARATOR}

请总结本次分析的关键要点：

1. 核心问题识别
2. 最佳解决方案
3. 实施要点
4. 预期成果
5. 后续跟进建议`;

  // 状态管理
  let state = {
    chain: [],
    input: '',
    index: 0,
    running: false
  };

  // 工具函数
  const $ = (sel) => document.querySelector(sel);
  const $$ = (sel) => document.querySelectorAll(sel);
  
  const parseChain = (text) => text.split(CONFIG.SEPARATOR).map(p => p.trim()).filter(p => p);
  
  const replaceInput = (text) => text.replace(/\{\{INPUT\}\}/g, state.input);

  // DOM 操作
  const findInput = () => $('textarea[data-id="root"]') || $('textarea[placeholder*="Message"]') || $('div[contenteditable="true"]');
  
  const findSendBtn = () => $('button[data-testid="send-button"]') || $('button[aria-label*="Send"]');
  
  const isGenerating = () => !!($('button[aria-label*="Stop"]') || $('button[data-testid="stop-button"]'));

  // 核心功能
  const sendMessage = async (text) => {
    const input = findInput();
    const btn = findSendBtn();
    
    if (!input || !btn) throw new Error('未找到输入框或发送按钮');
    
    const finalText = replaceInput(text);
    
    if (input.tagName === 'TEXTAREA') {
      input.value = finalText;
      input.dispatchEvent(new Event('input', { bubbles: true }));
    } else {
      input.textContent = finalText;
      input.dispatchEvent(new Event('input', { bubbles: true }));
    }
    
    await new Promise(resolve => setTimeout(resolve, 500));
    btn.click();
  };

  const waitResponse = () => new Promise((resolve, reject) => {
    const start = Date.now();
    const check = setInterval(() => {
      if (Date.now() - start > CONFIG.MAX_WAIT) {
        clearInterval(check);
        reject(new Error('等待超时'));
      }
      if (!isGenerating()) {
        clearInterval(check);
        resolve();
      }
    }, CONFIG.CHECK_INTERVAL);
  });

  const executeChain = async () => {
    if (state.running) return;
    if (!state.input && state.index === 0) {
      showInputModal();
      return;
    }
    
    state.running = true;
    updateUI();
    
    try {
      while (state.index < state.chain.length && state.running) {
        await sendMessage(state.chain[state.index]);
        await waitResponse();
        state.index++;
        updateUI();
        
        if (state.index < state.chain.length && state.running) {
          await new Promise(resolve => setTimeout(resolve, CONFIG.SEND_DELAY));
        }
      }
    } catch (error) {
      console.error('执行错误:', error);
      alert(`执行错误: ${error.message}`);
    } finally {
      state.running = false;
      updateUI();
    }
  };

  // UI 创建
  const createPanel = () => {
    const panel = document.createElement('div');
    panel.innerHTML = `
      <div id="prompt-panel" style="
        position: fixed; top: 40px; right: 20px; width: 320px;
        background: #2d2d2d; color: white; padding: 15px;
        border-radius: 10px; box-shadow: 0 4px 20px rgba(0,0,0,0.3);
        z-index: 10000; font-family: Arial, sans-serif; font-size: 14px;
      ">
        <h3 style="margin: 0 0 15px 0; color: #4CAF50;">🤖 智能分析助手</h3>
        
        <div style="margin-bottom: 15px;">
          <div>进度: <span id="progress">0/${state.chain.length}</span></div>
          <div>状态: <span id="status">等待输入</span></div>
        </div>
        
        <div style="display: flex; flex-direction: column; gap: 8px;">
          <button id="btn-input" style="background: #FF5722; color: white; border: none; padding: 10px; border-radius: 5px; cursor: pointer;">📝 输入数据</button>
          <div style="display: flex; gap: 8px;">
            <button id="btn-start" style="background: #4CAF50; color: white; border: none; padding: 8px; border-radius: 5px; cursor: pointer; flex: 1;" disabled>开始</button>
            <button id="btn-from" style="background: #FF9800; color: white; border: none; padding: 8px; border-radius: 5px; cursor: pointer; flex: 1;">从第N条</button>
          </div>
          <div style="display: flex; gap: 8px;">
            <button id="btn-stop" style="background: #f44336; color: white; border: none; padding: 8px; border-radius: 5px; cursor: pointer; flex: 1;">停止</button>
            <button id="btn-reset" style="background: #9E9E9E; color: white; border: none; padding: 8px; border-radius: 5px; cursor: pointer; flex: 1;">重置</button>
          </div>
          <button id="btn-edit" style="background: #2196F3; color: white; border: none; padding: 8px; border-radius: 5px; cursor: pointer;">编辑模板</button>
        </div>
        
        <div style="margin-top: 15px; font-size: 12px; color: #888;">
          <div>输入状态: <span id="input-status">未输入</span></div>
        </div>
      </div>
    `;
    
    document.body.appendChild(panel);
    bindEvents();
  };

  const showInputModal = () => {
    const modal = createModal(`
      <h3>📝 输入分析数据</h3>
      <textarea id="input-text" style="width: 100%; height: 300px; background: #1a1a1a; color: white; border: 1px solid #555; border-radius: 5px; padding: 10px;" placeholder="请输入要分析的内容...">${state.input}</textarea>
      <div style="margin-top: 15px; text-align: right;">
        <button id="confirm-input" style="background: #4CAF50; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; margin-right: 10px;">开始分析</button>
        <button class="close-modal" style="background: #666; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;">取消</button>
      </div>
    `);
    
    $('#confirm-input').onclick = () => {
      state.input = $('#input-text').value.trim();
      if (!state.input) {
        alert('请输入数据！');
        return;
      }
      $('#btn-start').disabled = false;
      updateUI();
      closeModal();
      executeChain();
    };
  };

  const showStartFromModal = () => {
    const modal = createModal(`
      <h3>🎯 选择起始位置</h3>
      <p>从第几条开始 (1-${state.chain.length}):</p>
      <input type="number" id="start-index" min="1" max="${state.chain.length}" value="${state.index + 1}" style="width: 100%; padding: 10px; background: #1a1a1a; color: white; border: 1px solid #555; border-radius: 5px;">
      <div style="margin-top: 15px; text-align: right;">
        <button id="confirm-start" style="background: #4CAF50; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; margin-right: 10px;">开始</button>
        <button class="close-modal" style="background: #666; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;">取消</button>
      </div>
    `);
    
    $('#confirm-start').onclick = () => {
      const index = parseInt($('#start-index').value) - 1;
      if (index >= 0 && index < state.chain.length) {
        state.index = index;
        updateUI();
        closeModal();
        executeChain();
      } else {
        alert('无效的索引');
      }
    };
  };

  const showEditModal = () => {
    const modal = createModal(`
      <h3>📝 编辑提示词模板</h3>
      <p>使用 ${CONFIG.SEPARATOR} 分隔不同提示词，使用 {{INPUT}} 作为占位符</p>
      <textarea id="edit-prompts" style="width: 100%; height: 400px; background: #1a1a1a; color: white; border: 1px solid #555; border-radius: 5px; padding: 10px; font-family: monospace;">${PROMPTS}</textarea>
      <div style="margin-top: 15px; text-align: right;">
        <button id="save-prompts" style="background: #4CAF50; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; margin-right: 10px;">保存</button>
        <button class="close-modal" style="background: #666; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;">取消</button>
      </div>
    `);
    
    $('#save-prompts').onclick = () => {
      PROMPTS = $('#edit-prompts').value;
      state.chain = parseChain(PROMPTS);
      updateUI();
      closeModal();
    };
  };

  const createModal = (content) => {
    const modal = document.createElement('div');
    modal.id = 'modal';
    modal.innerHTML = `
      <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 20000; display: flex; justify-content: center; align-items: center;">
        <div style="background: #2d2d2d; color: white; padding: 20px; border-radius: 10px; width: 80%; max-width: 600px;">
          ${content}
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
    
    // 绑定关闭事件
    $$('.close-modal').forEach(btn => btn.onclick = closeModal);
    modal.onclick = (e) => e.target === modal && closeModal();
    
    return modal;
  };

  const closeModal = () => {
    const modal = $('#modal');
    modal && document.body.removeChild(modal);
  };

  // 事件绑定
  const bindEvents = () => {
    $('#btn-input').onclick = showInputModal;
    $('#btn-start').onclick = executeChain;
    $('#btn-from').onclick = showStartFromModal;
    $('#btn-stop').onclick = () => { state.running = false; updateUI(); };
    $('#btn-reset').onclick = () => { state.running = false; state.index = 0; updateUI(); };
    $('#btn-edit').onclick = showEditModal;
  };

  // UI 更新
  const updateUI = () => {
    $('#progress').textContent = `${state.index}/${state.chain.length}`;
    $('#status').textContent = state.running ? '运行中...' : 
      state.index >= state.chain.length ? '已完成' : 
      state.input ? '就绪' : '等待输入';
    $('#input-status').textContent = state.input ? 
      `已输入 ${state.input.length} 字符` : '未输入';
  };

  // 初始化
  const init = () => {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
      return;
    }
    
    state.chain = parseChain(PROMPTS);
    createPanel();
    updateUI();
    
    console.log('ChatGPT 智能分析助手已加载 (极简版)');
  };

  init();
})();
